Default: get:true, set:true

Struct: ServerGroup; id:[Connection.Id ServerGroup.Id] doc:"Get in notifyservergrouplist"
Prop: Id, ServerGroupId; set:false
Prop: Name, str
Prop: GroupType, GroupType
Prop: IconId, IconHash
Prop: IsPermanent, bool; doc:"If the group is saved to the server database"
Prop: SortId, i32
Prop: NamingMode, GroupNamingMode
Prop: NeededModifyPower, i32
Prop: NeededMemberAddPower, i32
Prop: NeededMemberRemovePower, i32

Struct: File; id:[Connection.Id Channel.Id File.Path File.Name] doc:"A downloadable file"
Prop: Path, str
Prop: Name, str
Prop: Size, i64
Prop: LastChanged, DateTime
Prop: IsFile, bool; doc:"`true` if this is a file, `false` if it is a folder"

Struct: OptionalChannelData; id:[Connection.Id Channel.Id] doc:"Get in notifychanneledited by channelgetdescription"
Prop: Description, str

Struct: Channel; id:[Connection.Id Channel.Id] doc:"Get in channellist"
Prop: Id, ChannelId; set:false
Prop: Parent, ChannelId; doc:"0 means root channel"
Prop: Name, str
Prop: Topic, str
Prop: Codec, Codec
Prop: CodecQuality, u8
Prop: MaxClients, u16?; doc:"The maximum number of clients in the channel.\n\nNot set if it is unlimited."
Prop: MaxFamilyClients, MaxFamilyClients; doc:"Maximum number of clients in this and all child channels.\n\nNot set if it is unlimited."
Prop: Order, i32; doc:"TODO Type of order?"
Prop: ChannelType, ChannelType
Prop: IsDefault, bool; doc:"Whether it is the default channel"
Prop: HasPassword, bool; doc:"Whether this channel has a password"
Prop: CodecLatencyFactor, i32; doc:"TODO Type?"
Prop: IsUnencrypted, bool
Prop: DeleteDelay, Duration
Prop: NeededTalkPower, i32
Prop: ForcedSilence, bool; set:false
Prop: PhoneticName, str
Prop: IconId, IconHash
Prop: IsPrivate, bool
Nested: OptionalData, OptionalChannelData?; set:false

Default: get:true, set:false

Struct: OptionalClientData; id:[Connection.Id Client.Id] doc:"Get in notifyclientupdated by clientgetvariables"
Prop: Version, str; set:true, doc:"Can only be set for our own client"
Prop: Platform, str; set:true, doc:"Can only be set for our own client"
Prop: LoginName, str?; doc:"Set only for server queries"
Prop: Created, DateTime
Prop: LastConnected, DateTime
Prop: TotalConnection, u32
Prop: MonthBytesUploaded, u64
Prop: MonthBytesDownloaded, u64
Prop: TotalBytesUploaded, u64
Prop: TotalBytesDownloaded, u64

Struct: ConnectionClientData; id:[Connection.Id Client.Id] doc:"Get in notifyconnectioninfo by getconnectioninfo"
Prop: Ping, Duration
Prop: PingDeviation, Duration
Prop: ConnectedTime, Duration
Prop: ClientAddress, SocketAddr?; doc:"Only available if we have the permission to view it"
Prop: PacketsSentSpeech, u64
Prop: PacketsSentKeepalive, u64
Prop: PacketsSentControl, u64
Prop: BytesSentSpeech, u64
Prop: BytesSentKeepalive, u64
Prop: BytesSentControl, u64
Prop: PacketsReceivedSpeech, u64
Prop: PacketsReceivedKeepalive, u64
Prop: PacketsReceivedControl, u64
Prop: BytesReceivedSpeech, u64
Prop: BytesReceivedKeepalive, u64
Prop: BytesReceivedControl, u64
Prop: ServerToClientPacketlossSpeech, f32
Prop: ServerToClientPacketlossKeepalive, f32
Prop: ServerToClientPacketlossControl, f32
Prop: ServerToClientPacketlossTotal, f32
Prop: ClientToServerPacketlossSpeech, f32
Prop: ClientToServerPacketlossKeepalive, f32
Prop: ClientToServerPacketlossControl, f32
Prop: ClientToServerPacketlossTotal, f32
Prop: BandwidthSentLastSecondSpeech, u64
Prop: BandwidthSentLastSecondKeepalive, u64
Prop: BandwidthSentLastSecondControl, u64
Prop: BandwidthSentLastMinuteSpeech, u64
Prop: BandwidthSentLastMinuteKeepalive, u64
Prop: BandwidthSentLastMinuteControl, u64
Prop: BandwidthReceivedLastSecondSpeech, u64
Prop: BandwidthReceivedLastSecondKeepalive, u64
Prop: BandwidthReceivedLastSecondControl, u64
Prop: BandwidthReceivedLastMinuteSpeech, u64
Prop: BandwidthReceivedLastMinuteKeepalive, u64
Prop: BandwidthReceivedLastMinuteControl, u64
Prop: FiletransferBandwidthSent, u64
Prop: FiletransferBandwidthReceived, u64
Prop: IdleTime, Duration

Default: get:true, set:true

Struct: Client; id:[Connection.Id Client.Id], doc:"Get in notifycliententerview"
Prop: Id, ClientId; set:false
Prop: Channel, ChannelId
Prop: Uid, Uid; set:false, doc:"Unique Identifier"
Prop: Name, str
Prop: InputMuted, bool; doc:"`true` if muted, `false` otherwise"
Prop: OutputMuted, bool; doc:"`true` if muted, `false` otherwise"
Prop: OutputOnlyMuted, bool; doc:"`true` if muted, `false` otherwise"
Prop: InputHardwareEnabled, bool; doc:"`true` if enabled, `false` if disabled"
Prop: OutputHardwareEnabled, bool; doc:"`true` if enabled, `false` if disabled"
Prop: TalkPowerGranted, bool; doc:"If the client is granted talk power"
Prop: Metadata, str; doc:"Set by client"
Prop: IsRecording, bool; doc:"Whether the client is recording"
Prop: DatabaseId, ClientDbId; set:false
Prop: ChannelGroup, ChannelGroupId
Prop: ServerGroups, ServerGroupId[]
Prop: AwayMessage, str?; doc:"Contains the away message if the client is away"
Prop: ClientType, ClientType; set:false, doc:"If this client is a server query or not"
Prop: AvatarHash, str; set:false, doc:"MD5 hash of the avatar, used to retrieve the avatar"
Prop: TalkPower, i32; set:false
Prop: TalkPowerRequest, TalkPowerRequest?; set:false doc:"Contains a message and timestamp from the client if he requests talk power"
Prop: Description, str
Prop: IsPrioritySpeaker, bool
Prop: UnreadMessages, u32; set:false
Prop: PhoneticName, str
Prop: NeededServerqueryViewPower, i32; set:false
Prop: IconId, IconHash; set:false
Prop: IsChannelCommander, bool
Prop: CountryCode, str; set:false, doc:"Like US, DE"
Prop: InheritedChannelGroupFromChannel, ChannelId; set:false
Prop: Badges, str[]
Nested: OptionalData, OptionalClientData?; set:false
Nested: ConnectionData, ConnectionClientData?; set:false

Default: get:true, set:false

Struct: OptionalServerData; id:[Connection.Id], doc:"Get by notifyserverupdated after requested by servergetvariables"
Prop: ConnectionCount, u32; doc:"The amount of connections on this server.\n\nThis includes normal clients and server queries."
Prop: ChannelCount, u64; doc:"The amount of channels on the server"
Prop: Uptime, Duration
Prop: HasPassword, bool
Prop: DefaultChannelAdminGroup, ChannelGroupId; set:true, doc:"The channel group which will be given to channel creators"
Prop: MaxDownloadTotalBandwith, u64; set:true
Prop: MaxUploadTotalBandwith, u64; set:true
Prop: ComplainAutobanCount, u32; set:true
Prop: ComplainAutobanTime, Duration; set:true
Prop: ComplainRemoveTime, Duration; set:true
Prop: MinClientsForceSilence, u16; set:true, doc:"How many clients can be in a server before silence is forced"
Prop: AntifloodPointsTickReduce, u32; set:true
Prop: AntifloodPointsNeededCommandBlock, u32; set:true
Prop: ClientCount, u16; doc:"The amount of clients which are online on the server"
Prop: QueryCount, u32; doc:"Amount of server queries connected to the server"
Prop: QueryOnlineCount, u32; doc:"Amount of server queries connected and online/visible on the server"
Prop: DownloadQuota, u64; set:true
Prop: UploadQuota, u64; set:true
Prop: MonthBytesDownloaded, u64
Prop: MonthBytesUploaded, u64
Prop: TotalBytesDownloaded, u64
Prop: TotalBytesUploaded, u64
Prop: Port, u16
Prop: Autostart, bool; set:true
Prop: MachineId, str
Prop: NeededIdentitySecurityLevel, u8; set:true
Prop: LogClient, bool; set:true
Prop: LogQuery, bool; set:true
Prop: LogChannel, bool; set:true
Prop: LogPermissions, bool; set:true
Prop: LogServer, bool; set:true
Prop: LogFileTransfer, bool; set:true
Prop: MinClientVersion, DateTime
Prop: ReservedSlots, u16; set:true
Prop: TotalPacketlossSpeech, f32
Prop: TotalPacketlossKeepalive, f32
Prop: TotalPacketlossControl, f32
Prop: TotalPacketlossTotal, f32
Prop: TotalPing, Duration
Prop: WeblistEnabled, bool; set:true
Prop: MinAndroidVersion, DateTime; doc:"TODO Maybe str"
Prop: MinIosVersion, DateTime

Struct: ConnectionServerData; id:[Connection.Id], doc:"Get by notifyserverconnectioninfo after serverrequestconnectioninfo"
Prop: FileTransferBandwidthSent, u64
Prop: FileTransferBandwidthReceived, u64
Prop: FileTransferBytesSentTotal, u64
Prop: FileTransferBytesReceivedTotal, u64
Prop: PacketsSentTotal, u64
Prop: BytesSentTotal, u64
Prop: PacketsReceivedTotal, u64
Prop: BytesReceivedTotal, u64
Prop: BandwidthSentLastSecondTotal, u64
Prop: BandwidthSentLastMinuteTotal, u64
Prop: BandwidthReceivedLastSecondTotal, u64
Prop: BandwidthReceivedLastMinuteTotal, u64
Prop: ConnectedTime, Duration
Prop: PacketlossTotal, f32
Prop: Ping, Duration

Struct: Server; id:[Connection.Id], doc:"Get in initserver"
Prop: Uid, Uid; doc:"UniqueIdentifier"
Prop: VirtualServerId, u64; doc:"The virtual server id"
Prop: Name, str
Prop: WelcomeMessage, str; doc:"Welcome message when conecting to a server"
Prop: Platform, str
Prop: Version, str
Prop: MaxClients, u16; doc:"The maximum number of clients on the server"
Prop: Created, DateTime; doc:"Seems to be always 0"
Prop: CodecEncryptionMode, CodecEncryptionMode; set:true
Prop: hostmessage, str; set:true
Prop: hostmessage_mode, HostMessageMode; set:true
Prop: DefaultServerGroup, ServerGroupId; set:true
Prop: DefaultChannelGroup, ChannelGroupId; set:true
Prop: HostbannerUrl, str; set:true
Prop: HostbannerGfxUrl, str; set:true
Prop: HostbannerGfxInterval, Duration; set:true, doc:"How often the hostbanner should be updated"
Prop: PrioritySpeakerDimmModificator, f32; set:true
Prop: HostbuttonTooltip, str; set:true
Prop: HostbuttonUrl, str; set:true
Prop: HostbuttonGfxUrl, str; set:true
Prop: PhoneticName, str; set:true
Prop: IconId, IconHash; doc:"Should be an u32, sometimes the server sends an u64 for reasons which has to be cut to 32 bit"
Prop: Ip, str[]; doc:"A list of listen ips, can be empty"
Prop: AskForPrivilegekey, bool
Prop: HostbannerMode, HostBannerMode; set:true
Prop: TempChannelDefaultDeleteDelay, Duration; set:true
Prop: ProtocolVersion, u16
Prop: License, LicenseType
Nested: OptionalData, OptionalServerData?
Nested: ConnectionData, ConnectionServerData?
Nested: Clients, Client[]; doc:"All clients which are visible for us"
Nested: Channels, Channel[]; doc:"All channels on the server"
Nested: Groups, ServerGroup[]; doc:"All server groups on the server"

Struct: Connection; id:[Connection.Id], doc:"A connection from our client to a server", id:[Connection.Id]
Prop: Id, ConnectionId; doc:"The local unique id of our connection"
Prop: OwnClient, ClientId; doc:"The id of our own client on the server"
Nested: Server, Server; doc:"The server of this connection"

Struct: ChatEntry; id:[Connection.Id ChatEntry.SenderClient]
Prop: SenderClient, ClientId
Prop: Text, str
Prop: Date, DateTime
Prop: Mode, TextMessageTargetMode
